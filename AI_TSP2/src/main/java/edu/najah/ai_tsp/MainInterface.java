/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.najah.ai_tsp;


import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

class Board extends JPanel {
    public int distance = 0;

    public int getDistance() {
        return distance;
    }

    public void setDistance(int distance) {
        this.distance = distance;
    }

    public int getNumberOfCities() {
        return numberOfCities;
    }

    public void setNumberOfCities(int numberOfCities) {
        this.numberOfCities = numberOfCities;
    }

    public int getTemp() {
        return temp;
    }

    public void setTemp(int temp) {
        this.temp = temp;
    }
    public int numberOfCities = 0;
    public int temp = 0;
    
    public BufferedImage image;
    
    public Board(){
                    try {
            image = ImageIO.read(new File("src\\main\\java\\edu\\najah\\ai_tsp\\image.png"));
        } catch (IOException ex) {
            Logger.getLogger(Board.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public BufferedImage resize(BufferedImage img, int newW, int newH) { 
        Image tmp = img.getScaledInstance(newW, newH, Image.SCALE_SMOOTH);
        BufferedImage resizedImg = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2d = resizedImg.createGraphics();
        g2d.drawImage(tmp, 0, 0, null);
        g2d.dispose();

        return resizedImg;
    }    
    
    @Override
    public void paintComponent(Graphics g){
            super.paintComponents(g);

            BufferedImage resized = this.resize(image, this.getWidth(), this.getHeight());
            g.drawImage(resized, 0, 0, null);
    }
}



public class MainInterface extends javax.swing.JFrame {
    static Node d = new Node(0,0);
    static int r = 10;
    static ArrayList<Node> add = new ArrayList<>();
    static int ix = 0;
    float distance = 0;
    int initialTemp = 0,finalTemp = 0,currentTemp = 0,funcChoice = 0;
    boolean pathMade = false;
    private double a = 0;
    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        this.setResizable(false);
        this.jComboBox1.removeAllItems();
        this.setTitle("Travelling Salesman Problem");
        String f1 = "T/(1+log(i+1))";
        String f2 = "T*(a)^i";
        String f3 = "T/(1+a*i)";
        String f4 = "T/(1+a*log(i+1))";
        jComboBox1.addItem(f1);jComboBox1.addItem(f2);jComboBox1.addItem(f3);jComboBox1.addItem(f4);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        board1 = new edu.najah.ai_tsp.Board();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Clear Cities");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Initial Temp.");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Cooling Function");

        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Final Temp.");

        board1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                board1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout board1Layout = new javax.swing.GroupLayout(board1);
        board1.setLayout(board1Layout);
        board1Layout.setHorizontalGroup(
            board1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        board1Layout.setVerticalGroup(
            board1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton3.setText("Random Path");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Number of cities");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(board1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(board1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        add.clear();
        pathMade = false;
        this.ix = add.size();
        jLabel4.setText(""+this.ix);
        board1.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void board1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_board1MouseClicked
        // TODO add your handling code here:
        Graphics g = board1.getGraphics();
        g.setColor(Color.BLACK);
        pathMade = false;
        d.setX(evt.getX());
        d.setY(evt.getY());
        add.add(ix,new Node(d.getX(), d.getY()));
        ix++;
        jLabel4.setText(""+this.ix);
        g.drawOval(d.getX()-r/2,d.getY()-r/2, r, r);
        g.fillOval(d.getX()-r/2,d.getY()-r/2, r, r);
    }//GEN-LAST:event_board1MouseClicked

    
    
    private int coolingFunction(int currentTemp,int iteration){
        
        return (int) ((int)currentTemp/(Math.log(iteration+3)));
    }    
    private int coolingFunction1(int currentTemp,int iteration){
        
        return (int) ((int)currentTemp*(Math.pow(a,iteration+3)));
    }
    private int coolingFunction2(int currentTemp,int iteration){
        
        return (int) ((int)currentTemp/(1+(a*(iteration+3))));
    }
    private int coolingFunction3(int currentTemp,int iteration){
        
        return (int) ((int)currentTemp/(1+(a*(Math.log(iteration+3)))) );
    }
    
    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Annealing Here 
        
        // Assigning values for initial temp and final temp
        try{
            currentTemp = initialTemp = Integer.parseInt(jTextField1.getText());
            //System.out.println(currentTemp);
            finalTemp = Integer.parseInt(jTextField2.getText());
            funcChoice = this.jComboBox1.getSelectedIndex();
            // if its function 1 or 2 or 3, we need to ask the value for a
            String a_limitations = "";
            switch(funcChoice){
                case 1:
                    a_limitations = " ( 0.8 < a < 0.9 )";
                    break;
                case 2:
                    a_limitations = " ( a > 0 )";
                    break;
                case 3:
                    a_limitations = " ( a > 1 )";
                    break;
                default:
                    
                    break;
            }
            if(funcChoice != 0)
                a = Double.parseDouble(JOptionPane.showInputDialog("Enter the value for a"+a_limitations));
            int maxIter = Integer.parseInt(JOptionPane.showInputDialog("Enter the maximum number of iteration ( 0 for no limit )"));
            if(!pathMade){
            if(this.shufflePath())
                this.drawPath();
            }
            int i = 0;
            if(add.size() < 10)
                return;
            
            
            
            
            ArrayList<Node> bestConnection = this.returnCopy(add);
            float bestDistance = this.distance;
            ArrayList<Node> current = this.returnCopy(add);
            while(currentTemp >= finalTemp){
                // Child Generation and distances calculation
                //System.out.println(currentTemp); 
                ArrayList<Node> next = this.nodeGeneration(current);

                // Distance Calculation for child
                float nextDistance = 0;
                for(Node temp:next){
                    nextDistance += this.calculateDistance(temp, temp.getNext());
                }
                boolean repaint = false;
                float currentDistance = 0;
                for(Node temp:current){
                    currentDistance += this.calculateDistance(temp, temp.getNext());
                }     
                float E = (-nextDistance + currentDistance);
               
                if(E > 0){
                    current = this.returnCopy(next);
                    if(nextDistance < bestDistance){
                        bestConnection = this.returnCopy(next);
                        bestDistance = nextDistance;
                        repaint = true;
                    }
                }else{
                    Random rand = new Random();
                    float f1 = rand.nextFloat();
                    if(Math.exp(E/currentTemp) > f1){
                        current = this.returnCopy(next);
                    }
                }
                i++;
                if(repaint){
                    add = this.returnCopy(bestConnection);
                    this.drawPath();
                }
                if(funcChoice == 0)
                    currentTemp = this.coolingFunction(initialTemp,i+1);
                else if(funcChoice == 1)
                    currentTemp = this.coolingFunction1(initialTemp,i+1);
                else if(funcChoice == 2)
                    currentTemp = this.coolingFunction2(initialTemp,i+1);
                else if(funcChoice == 3)
                    currentTemp = this.coolingFunction3(initialTemp,i+1);
                if(i == maxIter){
                    JOptionPane.showMessageDialog(rootPane,"Reached maximum number of iterations", "Information", JOptionPane.INFORMATION_MESSAGE);
                    break;
                }
            }
            
            
           this.drawPath();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(rootPane,"Check the fields for inputs.","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(this.shufflePath())
            this.drawPath();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void drawPath(){
        Graphics g = board1.getGraphics();
        board1.paint(g);
        g.setColor(Color.BLACK);
        distance = 0;
        for(Node temp:add){
            g.drawOval(temp.getX()-r/2,temp.getY()-r/2, r, r);
            g.fillOval(temp.getX()-r/2,temp.getY()-r/2, r, r);
            g.drawLine(temp.getX(), temp.getY(), temp.getNext().getX(), temp.getNext().getY());
            distance += calculateDistance(temp,temp.getNext());
        }
        g.setColor(Color.BLACK);
        g.setFont(g.getFont());
        g.drawString("Current Distance :"+this.distance, this.getWidth()/2, 10);
        g.drawString("Current Temprature :"+this.currentTemp, this.getWidth()/2, 30);
    }
    
    
    
    private float calculateDistance(Node c1,Node c2){
        return (float) Math.sqrt(Math.pow(c1.getX()-c2.getX(),2)+Math.pow(c1.getY()-c2.getY(),2));
    }
    
     private boolean shufflePath(){
        if(add.size() < 10){
            JOptionPane.showMessageDialog(rootPane, "Please put enough cities on the map!\nMinimum Number of cities is ten.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        Collections.shuffle(add);
        for(int i = 0;i<add.size()-1;i++){
            add.get(i).setNext(add.get(i+1));
        }
        add.get(add.size()-1).setNext(add.get(0));
        pathMade = true;
        return true;
    }
    
    private ArrayList<Node> returnCopy(ArrayList<Node> copyList){
        ArrayList<Node> copied = new ArrayList<>();
        for(Node temp:copyList){
            Node te = new Node(temp.getX(),temp.getY());
            copied.add(te);
        }
        for(int i = 0;i<copied.size()-1;i++){
            copied.get(i).setNext(copied.get(i+1));
        }
        copied.get(copied.size()-1).setNext(copied.get(0));
        return copied;
    }
     
    private ArrayList<Node> nodeGeneration(ArrayList<Node> z){
        ArrayList<Node> generated = this.returnCopy(z);
        Random rand = new Random();
        int index1 = 0,index2=0;
        while(index1 == index2){
            index1 = rand.nextInt(generated.size());
            index2 = rand.nextInt(generated.size());
        }
        Node t1 = generated.get(index1);
        Node t2 = generated.get(index2);
        generated.set(index1, t2);
        generated.set(index2, t1);
        for(int i = 0;i<generated.size()-1;i++){
            generated.get(i).setNext(generated.get(i+1));
        }
        generated.get(generated.size()-1).setNext(generated.get(0));
        return generated;
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private edu.najah.ai_tsp.Board board1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
